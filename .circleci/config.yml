version: 2

references:

  ## Cache

  cache_key: &cache_key
    key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
  restore_cache: &restore_cache
    restore_cache:
      <<: *cache_key
  save_cache: &save_cache
    save_cache:
      <<: *cache_key
      paths:
        - ~/.gradle

  update_sdk: &update_sdk
    name: Update SDK
    command: |
      mkdir "$ANDROID_HOME/licenses" || true
      echo "d56f5187479451eabf01fb78af6dfcb131a6481e" > "$ANDROID_HOME/licenses/android-sdk-license"
      echo "84831b9409646a918e30573bab4c9c91346d8abd" > "$ANDROID_HOME/licenses/android-sdk-preview-license"
      sdkmanager "platform-tools" "platforms;android-27"

  ## Workspace

  workspace: &workspace
    ~/workspace
  attach_debug_workspace: &attach_debug_workspace
    attach_workspace:
      at: *workspace
  attach_release_workspace: &attach_release_workspace
    attach_workspace:
      at: *workspace
  persist_debug_workspace: &persist_debug_workspace
    persist_to_workspace:
      root: *workspace
      paths:
        - app/build/outputs/androidTest-results
        - app/build/outputs/apk
        - app/build/test-results
  persist_release_workspace: &persist_release_workspace
    persist_to_workspace:
      root: *workspace
      paths:
        - app/build
#  attach_firebase_workspace: &attach_firebase_workspace
#    attach_workspace:
#      at: *workspace
#  persist_firebase_workspace: &persist_firebase_workspace
#    persist_to_workspace:
#      root: *workspace
#      paths:
#        - firebase

  ## Docker image configurations

  android_config: &android_config
    working_directory: *workspace
    docker:
      - image: circleci/android:api-27-alpha
    environment:
      TERM: dumb
      _JAVA_OPTIONS: "-Xmx1400m -XX:ParallelGCThreads=2 -XX:ConcGCThreads=2 -XX:ParallelGCThreads=2 -Djava.util.concurrent.ForkJoinPool.common.parallelism=2"
      GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx2048m"'
  gcloud_config: &gcloud_config
    working_directory: *workspace
    docker:
      - image: google/cloud-sdk:latest
    environment:
      TERM: dumb

  # Google Services

#  export_gservices_key: &export_gservices_key
#    run:
#      name: Export Google Services key environment variable
#      command: echo 'export GOOGLE_SERVICES_KEY="$GOOGLE_SERVICES_KEY"' >> $BASH_ENV
#  decode_gservices_key: &decode_gservices_key
#    run:
#      name: Decode Google Services key
#      command: echo $GOOGLE_SERVICES_KEY | base64 -di > app/google-services.json

  # Google Cloud Service

#  export_gcloud_key: &export_gcloud_key
#    run:
#      name: Export Google Cloud Service key environment variable
#      command: echo 'export GCLOUD_SERVICE_KEY="$GCLOUD_SERVICE_KEY"' >> $BASH_ENV
#  decode_gcloud_key: &decode_gcloud_key
#    run:
#      name: Decode Google Cloud credentials
#      command: echo $GCLOUD_SERVICE_KEY | base64 -di > ${HOME}/client-secret.json

jobs:

  ## Build debug APK and instrumented test APK

  build:
    <<: *android_config
    steps:
      - run:
          <<: *update_sdk
      - checkout
      - *restore_cache
      - run:
          name: Chmod permissions
          command: sudo chmod +x ./gradlew
      - run:
          name: Download dependencies
          command: ./gradlew androidDependencies
      - run:
          name: Check and assemble APKs
          command: ./gradlew check assemble dependencyUpdates --no-daemon
      - *save_cache
#      - *export_gservices_key
#      - *decode_gservices_key
      - run:
          name: Gradle build (debug)
          command: ./gradlew -PciBuild=true :app:assembleDebug :app:assembleAndroidTest
      - *persist_debug_workspace
      - store_artifacts:
          path: app/build/outputs/apk/
          destination: /apk/
      - store_artifacts:
          path: build/dependencyUpdates
          destination: dependencyUpdates

  ## Run unit tests

#  test_unit:
#    <<: *android_config
#    steps:
#      - checkout
#      - *restore_cache
#      - run:
#          name: Chmod permissions
#          command: sudo chmod +x ./gradlew
#      - run:
#          name: Download dependencies
#          command: ./gradlew androidDependencies
#      - *save_cache
#      - *export_gservices_key
#      - *decode_gservices_key
#      - run:
#          name: Run unit tests
#          command: ./gradlew -PciBuild=true :app:testDebugUnitTest --info
#      - *persist_debug_workspace
#      - store_artifacts:
#          path: app/build/reports/
#          destination: /reports/
#      - store_test_results:
#          path: app/build/test-results/
#          destination: /test-results/

  ## Run instrumented tests

#  test_instrumented:
#    <<: *gcloud_config
#    steps:
#      - *attach_debug_workspace
#      - *export_gcloud_key
#      - *decode_gcloud_key
#      - run:
#          name: Set Google Cloud target project
#          command: gcloud config set project yoop-prod
#      - run:
#          name: Authenticate with Google Cloud
#          command: gcloud auth activate-service-account circle-ci@yoop-prod.iam.gserviceaccount.com --key-file ${HOME}/client-secret.json
#      - run:
#          name: Run instrumented test on Firebase Test Lab
#          command: gcloud firebase test android run --type instrumentation --app app/build/outputs/apk/debug/app-debug.apk --test app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk --device $NEXUS_5X_26 --timeout 20m
#      - run:
#          name: Create directory to store test results
#          command: mkdir firebase
#      - run:
#          name: Download instrumented test results from Firebase Test Lab
#          command: gsutil -m cp -r -U "`gsutil ls gs://test-lab-yvhrsx6yvd4ua-nrahjv3x1kwic | tail -1`*" /root/workspace/firebase/
#      - *persist_firebase_workspace
#      - store_artifacts:
#          path: firebase/
#          destination: /firebase/instrumented/

#  test_robo:
#    <<: *gcloud_config
#    steps:
#      - *attach_debug_workspace
#      - *export_gcloud_key
#      - *decode_gcloud_key
#      - run:
#          name: Set Google Cloud target project
#          command: gcloud config set project yoop-prod
#      - run:
#          name: Authenticate with Google Cloud
#          command: gcloud auth activate-service-account circle-ci@yoop-prod.iam.gserviceaccount.com --key-file ${HOME}/client-secret.json
#      - run:
#          name: Run Robo test on Firebase Test Lab
#          command: gcloud firebase test android run --type robo --app app/build/outputs/apk/debug/app-debug.apk --device $NEXUS_5X_26 --timeout 20m
#      - run:
#          name: Create directory to store test results
#          command: mkdir firebase
#      - run:
#          name: Download Robo test results from Firebase Test Lab
#          command: gsutil -m cp -r -U "`gsutil ls gs://test-lab-yvhrsx6yvd4ua-nrahjv3x1kwic | tail -1`*" /root/workspace/firebase/
#      - *persist_firebase_workspace
#      - store_artifacts:
#          path: firebase/
#          destination: /firebase/robo/

  ## Deploy release APK to Play Store

#  deploy:
#    <<: *android_config
#    steps:
#      - run:
#          <<: *update_sdk
#      - checkout
#      - *restore_cache
#      - *attach_release_workspace
#      - run:
#          name: Decrypt secrets
#          command: signing/setup.sh $ENCRYPT_KEY
#      - run:
#          name: Deploy to Alpha channel
#          command: ./gradlew publishRelease --no-daemon
#      - run:
#          name: Cleanup secrets
#          command: signing/cleanup.sh

workflows:
  version: 2
  workflow:
    jobs:
      - build
#      - test_unit
#      - test_instrumented:
#          requires:
#            - build
#      - test_robo: TODO enable robo tests
#          requires:
#            - build
#            - test_instrumented
#      - deploy:
#          filters:
#            branches:
#              only:
#                - deploy
#          requires:
#            - build
#            - test_unit
#            - test_instrumented
#            - test_robo