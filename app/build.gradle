
ext {
    ci = System.getenv("CI") == "true"
}

apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
kapt {
    correctErrorTypes = true
}
apply plugin: 'kotlin-android-extensions'
androidExtensions {
    experimental = true
    defaultCacheImplementation = "SPARSE_ARRAY"
}

android {
    compileSdkVersion 27
    buildToolsVersion "27.0.3"

    defaultConfig {
        applicationId "com.enovlab.yoop"
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 19
        versionName "1.0.14.3" // 1.0.Sprint#.Build#

        multiDexEnabled true

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        def hostName = propOrDef("DEEP_LINK_HOST", "")
        def scheme = propOrDef("DEEP_LINK_SCHEME", "")
        def pathEmailVerified = propOrDef("DEEP_LINK_PATH_EMAIL_VERIFIED", "")
        def pathChangePassword = propOrDef("DEEP_LINK_PATH_CHANGE_PASSWORD", "")
        def pathEvents = propOrDef("DEEP_LINK_PATH_EVENTS", "")
        def pathAssignment = propOrDef("DEEP_LINK_PATH_TOKEN_ASSIGNMENT", "")
        def pathMyTickets = propOrDef("DEEP_LINK_PATH_MY_TICKETS", "")
        def pathSecured = propOrDef("DEEP_LINK_PATH_SECURED", "")

        buildConfigField("String", "DEEP_LINK_HOST", "\"${hostName}\"")
        buildConfigField("String", "DEEP_LINK_SCHEME", "\"${scheme}\"")
        buildConfigField("String", "DEEP_LINK_PATH_EMAIL_VERIFIED", "\"${pathEmailVerified}\"")
        buildConfigField("String", "DEEP_LINK_PATH_CHANGE_PASSWORD", "\"${pathChangePassword}\"")
        buildConfigField("String", "DEEP_LINK_PATH_EVENTS", "\"${pathEvents}\"")
        buildConfigField("String", "DEEP_LINK_PATH_TOKEN_ASSIGNMENT", "\"${pathAssignment}\"")
        buildConfigField("String", "DEEP_LINK_PATH_MY_TICKETS", "\"${pathMyTickets}\"")
        buildConfigField("String", "DEEP_LINK_PATH_SECURED", "\"${pathSecured}\"")
        buildConfigField("String", "DEEP_LINK_QUERY_TOKEN", "\"${propOrDef("DEEP_LINK_QUERY_TOKEN", "")}\"")
        buildConfigField("String", "DEEP_LINK_QUERY_EVENT_ID", "\"${propOrDef("DEEP_LINK_QUERY_EVENT_ID", "")}\"")
        buildConfigField("String", "DEEP_LINK_QUERY_ASSIGNMENT_TOKEN", "\"${propOrDef("DEEP_LINK_QUERY_ASSIGNMENT_TOKEN", "")}\"")
        buildConfigField("String", "DEEP_LINK_QUERY_EMAIL", "\"${propOrDef("DEEP_LINK_QUERY_EMAIL", "")}\"")
        buildConfigField("String", "DEEP_LINK_QUERY_MARKETPLACE_ID", "\"${propOrDef("DEEP_LINK_QUERY_MARKETPLACE_ID", "")}\"")
        buildConfigField("String", "DEEP_LINK_QUERY_OFFER_GROUP_ID", "\"${propOrDef("DEEP_LINK_QUERY_OFFER_GROUP_ID", "")}\"")
        buildConfigField("String", "DEEP_LINK_QUERY_OFFER_ID", "\"${propOrDef("DEEP_LINK_QUERY_OFFER_ID", "")}\"")
        buildConfigField("String", "DEEP_LINK_QUERY_TICKET_DETAILS", "\"${propOrDef("DEEP_LINK_QUERY_TICKET_DETAILS", "")}\"")

        buildConfigField("String", "ZENDESK_BASE_URL", "\"${propOrDef("ZENDESK_BASE_URL", "")}\"")
        buildConfigField("String", "ZENDESK_APP_ID", "\"${propOrDef("ZENDESK_APP_ID", "")}\"")
        buildConfigField("String", "ZENDESK_SDK_CLIENT_ID", "\"${propOrDef("ZENDESK_SDK_CLIENT_ID", "")}\"")
        buildConfigField("String", "ZENDESK_ACCOUNT_KEY", "\"${propOrDef("ZENDESK_ACCOUNT_KEY", "")}\"")

        // Deep Links
        manifestPlaceholders += ["hostName": hostName]
        manifestPlaceholders += ["scheme": scheme]
        manifestPlaceholders += ["pathEmailVerified": pathEmailVerified]
        manifestPlaceholders += ["pathChangePassword": pathChangePassword]
        manifestPlaceholders += ["pathEvents": pathEvents]
        manifestPlaceholders += ["pathAssignment": pathAssignment]
        manifestPlaceholders += ["pathMyTickets": pathMyTickets]
        manifestPlaceholders += ["pathSecured": pathSecured]

    }

    signingConfigs {
        debug {
            storeFile rootProject.file("signing/app-debug.jks")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }

        release {
            storeFile rootProject.file("signing/app-release.jks")
            storePassword propOrDef('RELEASE_KEYSTORE_PWD', "")
            keyAlias "yoop"
            keyPassword propOrDef('RELEASE_KEY_PWD', "")
        }
    }

    buildTypes {

        debug {
            signingConfig signingConfigs.debug
            testCoverageEnabled false
        }

        release {
            signingConfig signingConfigs.release
        }

        if (!ci) {
            applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "${variant.name}-${variant.versionName}.apk"
                }
            }
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }

    dexOptions {
        // Don't pre-dex on CI
        preDexLibraries !ci
    }

    lintOptions {
        abortOnError false
        disable 'RestrictedApi'
        disable 'MissingTranslation'
        checkReleaseBuilds false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    flavorDimensions "tier"
    productFlavors {
        dev {
            dimension 'tier'
            def props = getConfigProperties("dev")
            buildConfigField("String", "BASE_URL", "\"${props["BASE_URL"]}\"")
            buildConfigField("String", "PAYSAFE_URL", "\"${props["PAYSAFE_URL"]}\"")
            buildConfigField("String", "PAYSAFE_USERNAME", "\"${props["PAYSAFE_USERNAME"]}\"")
            buildConfigField("String", "PAYSAFE_PASSWORD", "\"${props["PAYSAFE_PASSWORD"]}\"")
            buildConfigField("String", "LINK_TERMS_AND_CONDITIONS", "\"${props["LINK_TERMS_AND_CONDITIONS"]}\"")
            buildConfigField("String", "LINK_PRIVACY_POLICY", "\"${props["LINK_PRIVACY_POLICY"]}\"")
            buildConfigField("String", "LINK_PURCHASE_POLICY", "\"${props["LINK_PURCHASE_POLICY"]}\"")
            buildConfigField("String", "API_KEY", "\"${props["API_KEY"]}\"")
        }
        stg {
            dimension 'tier'
            def props = getConfigProperties("stg")
            buildConfigField("String", "BASE_URL", "\"${props["BASE_URL"]}\"")
            buildConfigField("String", "PAYSAFE_URL", "\"${props["PAYSAFE_URL"]}\"")
            buildConfigField("String", "PAYSAFE_USERNAME", "\"${props["PAYSAFE_USERNAME"]}\"")
            buildConfigField("String", "PAYSAFE_PASSWORD", "\"${props["PAYSAFE_PASSWORD"]}\"")
            buildConfigField("String", "LINK_TERMS_AND_CONDITIONS", "\"${props["LINK_TERMS_AND_CONDITIONS"]}\"")
            buildConfigField("String", "LINK_PRIVACY_POLICY", "\"${props["LINK_PRIVACY_POLICY"]}\"")
            buildConfigField("String", "LINK_PURCHASE_POLICY", "\"${props["LINK_PURCHASE_POLICY"]}\"")
            buildConfigField("String", "API_KEY", "\"${props["API_KEY"]}\"")
        }
        prod {
            dimension 'tier'
            def props = getConfigProperties("prod")
            buildConfigField("String", "BASE_URL", "\"${props["BASE_URL"]}\"")
            buildConfigField("String", "PAYSAFE_URL", "\"${props["PAYSAFE_URL"]}\"")
            buildConfigField("String", "PAYSAFE_USERNAME", "\"${props["PAYSAFE_USERNAME"]}\"")
            buildConfigField("String", "PAYSAFE_PASSWORD", "\"${props["PAYSAFE_PASSWORD"]}\"")
            buildConfigField("String", "LINK_TERMS_AND_CONDITIONS", "\"${props["LINK_TERMS_AND_CONDITIONS"]}\"")
            buildConfigField("String", "LINK_PRIVACY_POLICY", "\"${props["LINK_PRIVACY_POLICY"]}\"")
            buildConfigField("String", "LINK_PURCHASE_POLICY", "\"${props["LINK_PURCHASE_POLICY"]}\"")
            buildConfigField("String", "API_KEY", "\"${props["API_KEY"]}\"")
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${versions.kotlin}"

    // Android Kotlin extensions
    implementation "androidx.core:core-ktx:${versions.ktx}"

    // Support Libraries
    implementation "com.android.support:appcompat-v7:${versions.support_library}"
    implementation "com.android.support:support-v4:${versions.support_library}"
    implementation "com.android.support:recyclerview-v7:${versions.support_library}"
    implementation "com.android.support:design:${versions.support_library}"
    implementation "com.android.support:cardview-v7:${versions.support_library}"

    // Constraint Layout
    implementation "com.android.support.constraint:constraint-layout:${versions.constraint_layout}"

    // Architecture Components
    implementation "android.arch.lifecycle:viewmodel:${versions.arch_components}"
    kapt "android.arch.lifecycle:compiler:${versions.arch_components}"

    // Work Manager
    implementation "android.arch.work:work-runtime-ktx:${versions.work_manager}"
    implementation "android.arch.work:work-firebase:${versions.work_manager}"

    // Room
    implementation "android.arch.persistence.room:runtime:${versions.room}"
    implementation "android.arch.persistence.room:rxjava2:${versions.room}"
    kapt "android.arch.persistence.room:compiler:${versions.room}"

    // Dependencies Injection
    implementation "com.google.dagger:dagger-android:${versions.dagger}"
    implementation "com.google.dagger:dagger-android-support:${versions.dagger}"
    kapt "com.google.dagger:dagger-compiler:${versions.dagger}"
    kapt "com.google.dagger:dagger-android-processor:${versions.dagger}"

    // RxJava
    implementation "io.reactivex.rxjava2:rxjava:${versions.rx_java}"
    implementation "io.reactivex.rxjava2:rxandroid:${versions.rx_android}"

    // Type-safe HTTP client
    implementation "com.squareup.retrofit2:retrofit:${versions.retrofit}"
    implementation ("com.squareup.retrofit2:converter-gson:${versions.retrofit}", {
        exclude group: 'com.google.code.gson'
    })
    implementation "com.squareup.retrofit2:adapter-rxjava2:${versions.retrofit}"
    implementation "com.squareup.okhttp3:logging-interceptor:${versions.ok_http}"

    // JSON serializer
    implementation "com.google.code.gson:gson:${versions.gson}"

    // Logger
    implementation "com.jakewharton.timber:timber:${versions.timber}"

    // Leak Canary
    debugImplementation "com.squareup.leakcanary:leakcanary-android:${versions.leak_canary}"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${versions.leak_canary}"

    // Image processing
    implementation "com.github.bumptech.glide:glide:${versions.glide}"
    kapt "com.github.bumptech.glide:compiler:${versions.glide}"

    // SVG parser
    implementation "com.caverock:androidsvg:${versions.svg_parser}"

    // Widgets
    implementation "com.github.warkiz.widget:indicatorseekbar:${versions.indicator_seekbar}"
    implementation "de.hdodenhof:circleimageview:${versions.civ}"
    implementation "com.github.chrisbanes:PhotoView:${versions.photo_view}"
    implementation "net.yslibrary.keyboardvisibilityevent:keyboardvisibilityevent:${versions.keyboard}"
    implementation "com.daimajia.swipelayout:library:${versions.swipe_layout}"

    implementation "com.zendesk:support:${versions.zendesk}"
    implementation "com.zopim.android:sdk:${versions.zendesk_chat}"

    // Local unit tests
    testImplementation "junit:junit:${versions.junit}"
    testImplementation "org.mockito:mockito-all:${versions.mockito_all}"
    testImplementation "net.bytebuddy:byte-buddy-android:${versions.buddybyte}"
    testImplementation "org.hamcrest:hamcrest-all:${versions.hamcrest}"
    testImplementation "android.arch.core:core-testing:${versions.arch_components}"
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:${versions.kotlin}"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:${versions.kotlin}"

    // Android Testing Support Library's runner and rules
    androidTestImplementation "com.android.support.test:runner:${versions.runner}"
    androidTestImplementation "com.android.support.test:rules:${versions.rules}"
    androidTestImplementation "android.arch.persistence.room:testing:${versions.room}"
    androidTestImplementation "android.arch.core:core-testing:${versions.arch_components}"

    // Android unit tests
    androidTestImplementation "junit:junit:${versions.junit}"
    androidTestImplementation ("org.mockito:mockito-core:${versions.mockito_core}", {
        exclude group: 'net.bytebuddy'
    })

    // Espresso UI Testing
    androidTestImplementation "com.android.support.test.espresso:espresso-core:${versions.espresso}"
    androidTestImplementation "com.android.support.test.espresso:espresso-contrib:${versions.espresso}"
    androidTestImplementation "com.android.support.test.espresso:espresso-intents:${versions.espresso}"

    // Resolve conflicts between main and test APK:
    androidTestImplementation "com.android.support:support-annotations:${versions.support_library}"
    androidTestImplementation "com.android.support:support-v4:${versions.support_library}"
    androidTestImplementation "com.android.support:appcompat-v7:${versions.support_library}"
    androidTestImplementation "com.android.support:design:${versions.support_library}"

    //custom tabs
    implementation "com.android.support:customtabs:${versions.support_library}"
}
